snippet ps "php file start"
	<?php

	declare(strict_types=1);
	${0}

snippet fclass "file class"
	<?php

	declare(strict_types=1);

	namespace JJ

	class JJ
	{
	    ${0}
	}

snippet finterface "file interface"
	<?php

	declare(strict_types=1);

	namespace JJ;

	interface JJ
	{
	    ${0}
	}

snippet fenum "file enum"
	<?php

	declare(strict_types=1);

	namespace JJ;

	enum JJ
	{
	    ${0}
	}

snippet dst "declare strict_types"
	declare(strict_types=1);
	${0}

snippet c "comment"
	// $0

snippet d "docblock"
	/**
	 * $0
	 */

snippet dp "docblock param"
	/**
	 * @param $0
	 */

snippet dpr "docblock param return"
	/**
	 * @param $0
	 *
	 * @return
	 */

snippet dr "docblock return"
	/**
	 * @return $0
	 */

snippet dv "docblock var"
	/** @var ${1:Type} $${2:var}$0 */

snippet mt "measure time"
	\$timeStart = microtime(true);
	$0
	sprintf('Execution time: %Fs', microtime(true) - \$timeStart);

snippet mtd "measure time dump"
	\$timeStart = microtime(true);
	$0
	dump(sprintf('Execution time: %Fs', microtime(true) - \$timeStart));

snippet t "$this"
	$$this${1}

snippet tt "$this"
	$$this->${1}

snippet xs "new array"
	$${1:xs} = [
		'${2:key}' => ${3},
	];

snippet r "return ;"
	return ${1};

snippet rett "return true;"
	return true;${0}

snippet retf "return false;"
	return false;${0}

snippet retj "return json"
	return $$this->json([
		'${1}' => ${2},
	]);

snippet retv "return view"
	return $$this->render('${1}', [
		'${2:key}' => ${3},
	]);
